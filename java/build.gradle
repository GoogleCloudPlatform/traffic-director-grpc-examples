plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.8'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def grpcVersion = '1.41.0' // CURRENT_GRPC_VERSION
def opencensusVersion = '0.28.0'
def protobufVersion = '3.12.0'
def protocVersion = protobufVersion

dependencies {
    compile "io.opencensus:opencensus-api:${opencensusVersion}",
            "io.opencensus:opencensus-contrib-grpc-metrics:${opencensusVersion}",
            "io.opencensus:opencensus-exporter-stats-stackdriver:${opencensusVersion}",
            "io.opencensus:opencensus-exporter-trace-stackdriver:${opencensusVersion}"
    implementation "io.grpc:grpc-census:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation "io.grpc:grpc-xds:${grpcVersion}"

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    runtime "io.opencensus:opencensus-impl:${opencensusVersion}"

    testImplementation "com.google.truth:truth:1.1.2"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.28.2"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
        proto {
            srcDirs '../proto'
        }
    }
}

startScripts.enabled = false

task accountServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.wallet.AccountServer'
    applicationName = 'account-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task statsServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.wallet.StatsServer'
    applicationName = 'stats-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task walletServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.wallet.WalletServer'
    applicationName = 'wallet-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task client(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.wallet.Client'
    applicationName = 'client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(accountServer)
    from(statsServer)
    from(walletServer)
    from(client)
    fileMode = 0755
}
